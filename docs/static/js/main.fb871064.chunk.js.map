{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/GetGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","props","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAqCeA,EAlCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEJC,mBAAS,IAFL,mBAEjCC,EAFiC,KAErBC,EAFqB,KAiBvC,OACE,sBAAMC,SAVY,SAACC,GACpBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACxCN,EAAc,MAMd,SACE,uBACAO,KAAK,OACLC,MAAOT,EACPU,SAlBqB,SAACP,GAC1BF,EAAcE,EAAEQ,OAAOF,a,QCUVG,EAfK,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAG3B,OACE,sBAAKC,UAAU,yCAAf,UACE,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCRIK,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEhBN,EAFgB,iDAEgCO,UAAUF,GAF1C,+DAGHG,MAAMR,GAHH,cAGhBS,EAHgB,gBAIDA,EAAKC,OAJJ,uBAIfC,EAJe,EAIfA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC5B,MAAO,CACLC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIE,cAAN,aAAE,EAAYC,iBAAiBjB,QAVhB,kBAcfY,GAde,4CAAH,sDCsCNM,EAhCC,SAAC,GAAgB,IAAfb,EAAc,EAAdA,SAAc,ECJJ,SAACA,GAAc,IAAD,EAChBpB,mBAAS,CACjC0B,KAAM,GACNQ,SAAS,IAH+B,mBACnCC,EADmC,KAC5BC,EAD4B,KAaxC,OAPFC,qBAAU,WACNlB,EAAQC,GACPkB,MAAK,SAAAC,GAAI,OAAIH,EAAS,CAACV,KAAMa,EAAML,SAAS,SAC9C,CAACd,IAIKe,EDNyBK,CAAapB,GAAhCW,EAHiB,EAGvBL,KAAcQ,EAHS,EAGTA,QAOnB,OACE,qCACE,oBAAIlB,UAAU,oCAAd,SAAmDI,IAElDc,EAAU,mBAAGlB,UAAU,mCAAb,sBACV,qBAAKA,UAAU,YAAf,SACIe,EAAOH,KAAI,SAAAC,GAAG,OACb,cAAC,EAAD,eAEIA,GADCA,EAAIC,aEURW,EA9BM,SAAAC,GAAU,IAAD,EAEM1C,mBAAS,CAAC,QAFhB,mBAEvB2C,EAFuB,KAEX5C,EAFW,KAQ5B,OACE,gCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACC4C,EAAWf,KAAK,SAACR,GAAD,OACf,cAAC,EAAD,CAEAA,SAAUA,GADLA,YCjBbwB,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.fb871064.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({setCategories}) => {\n  \n const [inputValue, setInputValue] = useState('')\n\n const handleInputChange = (e) => {\n  setInputValue(e.target.value);\n }\n\n const handleSubmit = (e) =>{\n   e.preventDefault();\n   if(inputValue.trim().length > 2 ){\n     setCategories( cats => [inputValue, ...cats]);\n    setInputValue('');\n   }\n\n }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n      type='text'\n      value={inputValue}\n      onChange={handleInputChange}\n      />\n      </form>\n  )\n}\n\n\n\nAddCategory.propTypes = {\nsetCategories: PropTypes.func.isRequired,\n}\n\nexport default AddCategory\n","import React from 'react'\n// import PropTypes from 'prop-types'\n\nconst GifGridItem = ({title, url}) => {\n  \n  \n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  )\n}\n\n// GifGridItem.propTypes = {\n// //\n// }\n\nexport default GifGridItem;\n","\n export const getGifs = async(category) =>{\n\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=gE6x40edq4ngwxZzi6peFu8rkrmiJD59`; \n  const resp = await fetch(url);\n  const {data} = await resp.json();\n\n  const gifs = data.map( img => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url\n    }\n  })\n\n  return gifs;\n\n};\n","import React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport GifGridItem from './GifGridItem';\n// import {getGifs} from '../helpers/GetGifs';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\n\nconst GifGrid = ({category}) => {\n\n\n  const {data: images, loading} = useFetchGifs(category);\n  // const [images, setImages] = useState([]);\n  // useEffect(()=> {\n  //   getGifs(category)\n  //     .then(setImages);\n  // }, [category]);\n\n    return (\n      <>\n        <h3 className='animate__animated animate__fadeIn'>{category}</h3>\n\n        {loading ? <p className='animate__animated animate__flash'>Cargando</p> : \n       ( <div className='card-grid'>\n            {images.map(img => (\n              <GifGridItem \n              key={img.id}\n              {...img}\n              // img={img}\n              />)\n              )}\n        </div>)}\n      </>\n    )\n}\n\nGifGrid.propTypes = {\ncategory: PropTypes.string\n}\n\nexport default GifGrid;\n","import { useEffect, useState } from \"react\"\nimport {getGifs} from '../helpers/GetGifs'\n\nexport const useFetchGifs = (category) => {\nconst [state, setState] = useState({\n  data: [],\n  loading: true,\n});\n\nuseEffect(() => {\n    getGifs(category)\n    .then(imgs => setState({data: imgs, loading: false})); \n}, [category]);\n\n\n\n  return state;\n}\n","import React, { useState } from 'react'\n// import PropTypes from 'prop-types'\nimport AddCategory from './components/AddCategory'\nimport GifGrid from './components/GifGrid'\n\nconst GifExpertApp = props => {\n\nconst [categories, setCategories] = useState(['dog'])\n\n// const handleAdd = () => {\n//   setCategories([...categories, 'SNK']) ;\n// }\n\n  return (\n    <div>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n\n      <ol>\n      {categories.map( (category) => (\n        <GifGrid \n        key={category}\n        category={category}\n        />\n      ) )}\n      </ol>\n    </div>\n  )\n}\n\n// GifExpertApp.propTypes = {\n\n// }\n\nexport default GifExpertApp\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}